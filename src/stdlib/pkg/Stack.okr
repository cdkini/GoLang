// Okra implementation of the stack abstract data type.


// StackNode is a helper struct used to create the Stack data type.
// Args:
//   val  (any):       The value to be stored in the node
//   next (StackNode): Pointer to the next StackNode
//   prev (StackNode): Pointer to the prior StackNode
// Returns:
//   StackNode: Instance of struct with given value
struct StackNode {
    construct : val, next, prev : {
        this.val:  val;
        this.next: next;
        this.prev: prev;
    }
}


// Stack is a linear, last-in first-out (LIFO) based collection.
// Args:
//   null
// Returns:
//   Stack: Empty instance of struct
struct Stack {
    construct :: {
        this.sentinel: StackNode(null, null, null);
        this.curr: this.sentinel;
        this.size: 0;
    }

    // Push adds a node to the top or end of the stack.
    // Args:
    //   item (any): The value of the new node added to the stack
    // Returns:
    //   null 
    Push : item : {
        newNode: StackNode(item, null, this.curr);
        this.curr.next: newNode;
        this.curr: this.curr.next;
        this.size: this.size + 1;
    }

    // Len returns the length or size of the stack.
    // Args:
    //   null
    // Returns:
    //   numeric: Number of items in the stack
    Len :: {
        return this.size;
    }

    // IsEmpty returns whether or not the stack contains items.
    // Args:
    //   null
    // Returns:
    //   bool: true if the stack has no items else false
    IsEmpty :: {
        this.size = 0;
    }

    // Peek reveals the top or last node on the stack but does not remove it.
    // Args:
    //   null
    // Returns:
    //   any: The value of the top or last node of the stack
    // Raises:
    //   StackError: If invoked upon an empty stack
    Peek :: {
        if (this.IsEmpty()) {
            print "StackError: Cannot peek an empty stack";
            return;
        }
        return this.curr.val;
    }

    // Pop reveals the top or last node on the stack and removes it.
    // Args:
    //   null
    // Returns:
    //   any: The value of the top or last node of the stack
    // Raises:
    //   StackError: If invoked upon an empty stack
    Pop :: {
        if (this.isEmpty()) {
            print "StackError: Cannot pop an empty stack";
            return;
        }
        res: this.curr.val;
        this.curr: this.curr.prev;
        this.curr.next: null;
        return res;
    }
}
