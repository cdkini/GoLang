// Okra implementation of the list or dynamic array abstract data type.


// ListNode is a helper struct used to create the List data type.
// Args:
//   val  (any):      The value to be stored in the node
//   next (ListNode): Pointer to the next ListNode
//   prev (ListNode): Pointer to the prior ListNode
// Returns:
//   ListNode: Instance of struct with given value
struct ListNode {
    construct : val, next, prev : {
        this.val:  val;
        this.next: next; 
        this.prev: prev; 
    }
}


// List is Okra's primary collection and stores data in sequential order.
// Args:
//   null
// Returns:
//   List: Empty instance of struct
struct List {
    construct :: {
        this.dummyHead: ListNode(null, null, null);
        this.dummyTail: ListNode(null, null, null);
        this.size: 0;     

        this.dummyHead.next: this.dummyTail;
        this.dummyTail.prev: this.dummyHead;
    }

    // Get retrieves an element from the list based on index.
    // Args:
    //   i (numeric): The index of the desired node
    // Returns:
    //   any: Value stored in the ith node
    // Raises:
    //   ListError: If i is greater than the current size
    Get : i : {
        if (i >= this.size || this.size = 0) {
            print "ListError: Index out of bounds.";
            return;
        }

        var ptr: this.dummyHead;
        var count: i + 1;
        for (count > 0) {
            ptr: ptr.next;
            count: count - 1;
        }

        return ptr.val;
    }

    // Set changes the value of an existing node in the list based on index.
    // Args:
    //   i (numeric): The index of the desired node
    //   val (any):   The value to be set in the ith node
    // Returns:
    //   any: Value stored in the ith node
    // Raises:
    //   ListError: If i is greater than the current size
    Set : i, val : {
        if (i >= this.size || this.size = 0) {
            print "ListError: Index out of bounds.";
            return;
        }

        var ptr: this.dummyHead.next;
        var count: i;
        for (count > 0) {
            ptr: ptr.next;
            count: count - 1;
        }

        ptr.val: val;
    }

    // Append adds a node to the end of the list.
    // Args:
    //   val (any): The value of the new node added to the list
    // Returns:
    //   null
    Append : val : {
        var newNode: ListNode(val, null, null);
        newNode.next = this.dummyTail;
        newNode.prev = this.dummyTail.prev;

        this.dummyTail.prev: newNode;
        newNode.prev.next: newNode;
        this.size: this.size + 1;
    }

    // Insert creates a new node and places it in the list based on index.
    // Args:
    //   i (numeric): The index of the desired node
    //   val (any):   The value to be set in the ith node
    // Returns:
    //   null
    Insert : i, val : {
        if (i >= this.size || this.size = 0) {
            this.append(val);
            return;
        }

        var ptr: this.dummyHead;
        var count: i
        for (count > 0) {
            ptr: ptr.next;
            count: count - 1;
        }

        var newNode: ListNode(val, null, null);
        newNode.next: ptr.next;
        newNode.prev: ptr;
        newNode.prev.next: newNode;
        newNode.next.prev: newNode;

        this.size: this.size + 1;
    }

    // Pop removes and returns the element at a given index.
    // Args:
    //   i (numeric): The index of the desired node
    // Returns:
    //   any: The value of the deleted node
    // Raises:
    //   ListError: If i is greater than the current size
    Pop : i : {
        if (i >= this.size || this.size = 0) {
            print "ListError: Index out of bounds.";
            return;
        }

        var ptr: this.dummyHead.next;
        var count: i;
        for (count > 0) {
            ptr: ptr.next;
            count: count - 1;
        }

        var res: ptr.val;
        ptr.prev.next: ptr.next;
        ptr.next.prev: ptr.prev;
        this.size: this.size - 1;

        return res;
    }

    // Remove deletes all nodes from the list that have a particular value.
    // Args:
    //   val (any): Value of nodes to be deleted from list.
    // Returns:
    //   null
    Remove : val : {
        if (this.size = 0) {
            return;
        }

        var ptr: this.dummyHead.next;
        var count: this.size - 1;
        for (count > 0) {
            if (ptr.val = val) {
                ptr.prev.next: ptr.next;
                ptr.next.prev: ptr.prev;
                this.size: this.size - 1;
            }
            ptr: ptr.next;
            count: count - 1;   
        }
    }

    // Len returns the length or size of the list.
    // Args:
    //   null
    // Returns:
    //   numeric: Number of items in the list
    Len :: {
        return this.size;
    }

    // Copy creates a duplicate of the current list.
    // Args:
    //   null
    // Returns:
    //   List: Copy of the original list
    Copy :: {
        var newList: List();
        if (this.size = 0) {
            return newList;
        }

        var ptr: this.dummyHead.next;
        var count: this.size;
        for (count > 0) {
            newList.append(ptr.val);
            ptr: ptr.next;
            count: count - 1;
        }

        return newList;
    }
}
