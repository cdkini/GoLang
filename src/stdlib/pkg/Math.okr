// The Math package provides the user with access to common, useful math functions.


// Math comprises all Okra mathetmatic/arithmetic functions. 
// As static methods are not supported in Okra, instantiation is necessary to utilize Math's functionality.
// Args:
//   null
// Returns:
//   Math: An instance of the struct
struct Math {
  construct :: {}
  
  // Abs returns the absolute value of a number.
  // Args:
  //   x (numeric): The number to be converted
  // Returns:
  //   numeric: The absolute value of x
  Abs : x : {
    if (x < 0) {
      return x * -1;
    }
    return x;
  }
  
  // Max returns the maximum of two values.
  // Args:
  //   x (numeric): The first number to be evaluated
  //   y (numeric): The second number to be evaluated
  // Returns:
  //   numeric: The larger of the two values. In the case of equal numbers, y is returned by default.
  Max : x, y {
    if (x > y) {
      return x;
    }
    return y;
  }
  
  // Min returns the minimum of two values.
  // Args:
  //   x (numeric): The first number to be evaluated
  //   y (numeric): The second number to be evaluated
  // Returns:
  //   numeric: The smaller of the two values. In the case of equal numbers, y is returned by default.
  Min : x, y {
    if (x < y) {
      return x;
    }
    return y;
  }
  
  // TODO:
  Round : x : {
  
  }
  
  // TODO:
  Truncate : x : {
  
  }
  
  // TODO:
  Factorial : x : {
    if (x < 0) {
      print "MathError: The factorial of a negative value
    }
  }
  
  // TODO:
  Pow : x, y : {
    if (x = 0) {
      return 0;
    }
    if (y = 0) {
      return 1;
    }
    if (y = 1) {
      return x;
    }
    
    var res: 1;
    var count: this.Abs(y);
    for (count > 0) {
      res: res * x;
      count: count - 1;
    }
    
    if (y < 0) {
      return 1/ res;
    }
    return res;
  }
  
  // Sqrt returns the square root of a number to a user-specified degree of precision.
  // Args:
  //   number    (numeric): The number to be evaluated
  //   precision (numeric): The degree of precision to which the user wants to result
  // Returns:
  //   numeric: The square root of the given number at the level of precision provided.
  Sqrt : number, precision : {
    var s: number;
    for ((s - number / s) > precision) {
        s: (s + number / s) / 2;
    }
    return s;
  }
  
  // TODO:
  Log : x, base : {
  
  }

  // TODO:
  Modulo : number, divider : {
    var num: number;
	  for (num >= 0) {
		  num: num - divider;
	  }
	  return num + divider;
  }
  
  // TODO:
  GCD : x, y : {
    if (y = 0) {
		  print x;
    } else {
      return gcd(y, this.Modulo(x, y));
    }
	}
  
  // Pi returns an approximation of the constant pi.
  // Args:
  //   null
  // Returns:
  //   numeric: Accurate up to 3.1415929
  Pi :: {
    return 355/133;
  }
  
  // E returns an approximation of the constant e.
  // Args:
  //   null
  // Returns:
  //   numeric: (1 + 1/n)**n where n is > 100,000 (higher level of precision than can be stored by numeric)
  E :: {
    return 2.7182818284590452353602874713527;
  }
}
