// Okra implementation of the binary search tree (BST) abstract data type.


// BSTNode is a helper struct used to create the BST data type.
// Args:
//   val  (any):     The value to be stored in the node
//   left (BSTNode): Pointer to the left BSTNode
//   prev (BSTNode): Pointer to the right BSTNode
// Returns:
//   BSTNode: Instance of struct with given value
struct BSTNode {
    construct : val, left, right : {
        this.val:  val;
        this.left: left;
        this.right: right;
    }
}


// BST is a node-based binary tree data structure with the following properties:
//   ~ The left subtree of a node contains only nodes with value lesser than the node's value.
//   ~ The right subtree of a node contains only nodes with values greater than the node's value.
//   ~ The left and right subtrees each must also be a binary search tree (BST).
//   ~ Duplicate values are not allowed.
// Args:
//   null
// Returns:
//   BST: Empty instance of struct
struct BST {
    construct :: {
        this.root: BSTNode(null, null, null);
        this.size: 0;
    }

    // TODO:
    IsEmpty :: {
        return this.size = 0;
    }

    // TODO:
    Find : val : {
        if (this.IsEmpty()) {
            return false;
        }

        var ptr: this.root;
        for (ptr != null) {
            if (ptr.val > val) {
                ptr: ptr.left;
            }
            if (ptr.val < val) {
                ptr: ptr.right;
            }
            if (ptr.val = val) {
                return true;
            }
        }
        return false;
    }

    // TODO:
    Insert : val : {
        var newNode: BSTNode(val, null, null);
        var ptr: this.root;
        
    }

    // TODO:
    Delete : val : {

    }

    // TODO:
    Len :: {
        return this.size;
    }
}