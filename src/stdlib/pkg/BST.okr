// Okra implementation of the binary search tree (BST) abstract data type.


// BSTNode is a helper struct used to create the BST data type.
// Args:
//   val  (any):     The value to be stored in the node
//   left (BSTNode): Pointer to the left BSTNode
//   prev (BSTNode): Pointer to the right BSTNode
// Returns:
//   BSTNode: Instance of struct with given value
struct BSTNode {
    construct : val, left, right : {
        this.val:  val;
        this.left: left;
        this.right: right;
    }
}


// BST is a node-based binary tree data structure with the following properties:
//   ~ The left subtree of a node contains only nodes with value lesser than the node's value.
//   ~ The right subtree of a node contains only nodes with values greater than the node's value.
//   ~ The left and right subtrees each must also be a binary search tree (BST).
//   ~ Duplicate values are not allowed.
// Args:
//   null
// Returns:
//   BST: Empty instance of struct
struct BST {
    construct :: {
        this.root: BSTNode(null, null, null);
        this.size: 0;
    }

    // IsEmpty returns whether or not the BST contains items.
    // Args:
    //   null
    // Returns:
    //   bool: true if the BST has no items else false
    IsEmpty :: {
        return this.size = 0;
    }

    // _find is a recursive helper method used in Find.
    // Args:
    //   curr (BSTNode): The current BSTNode being evaluated
    //   val (any):      The value stored in the current BSTNode
    // Returns:
    //   bool: true if val is in BST else false
    _find : curr, val : {
        if (curr = null) {
            return false;
        }
        if (ptr.val > val) {
            return find(ptr.left, val);
        }
        if (ptr.val < val) {
            return find(ptr.right, val);
        }
        return true;
    }

    // Find traverses the BST to determine whether or not a value is included within.
    // Args:
    //   val (any): The target value to be found
    // Returns:
    //   bool: true if val is in BST else false
    Find : val : {
        if (this.IsEmpty()) {
            return false;
        }
        return _find(this.root, val);
    }

    // _insert is a recursive helper method used in Insert.
    // Args:
    //   curr (BSTNode): The current BSTNode being evaluated
    //   val (any):      The value to be inserted into the BST
    // Returns:
    //   BSTNode: Either the root node or the newly inserted node (depending on which recursive call)
    _insert : curr, val : {
        if (curr = null) {
            this.size: this.size + 1;
            return BSTNode(val, null, null);
        }
        if (val < curr.val) {
            curr.left: this._insert(curr.left, val);
        }
        if (val > curr.val) {
            curr.right: this._insert(curr.right, val);
        }
        return curr;
    }

    // Insert traverses the BST and inserts a new node with the given value.
    // If the value is already located in the BST, no node is added.
    // Args:
    //   val (any): The value to be inserted into the BST
    // Returns:
    //   null
    Insert : val : {
        this.root: _insert(this.root, val);
    }

    // TODO:
    _delete : curr, val : {
        if (curr = null) {
            return curr;
        }
        if (val < curr.val) {
            curr.left: self._delete(curr.left, val);
        }
        if (val > curr.val) {
            curr.right: self._delete(curr.right, val);
        }
        if (val = curr.val) {
            
        }
    }

    // TODO:
    Delete : val : {
        this.root: _delete(this.root, val);
    }

    // Len returns the length or size of the BST.
    // Args:
    //   null
    // Returns:
    //   numeric: Number of items in the BST
    Len :: {
        return this.size;
    }
}